%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (mikem255) ()
%%Title: (logoz.ai)
%%CreationDate: 11/30/2015 6:29 PM
%%Canvassize: 8640
%%BoundingBox: 123 266 778 629
%%HiResBoundingBox: 123.9807 266.4185 777.1069 628.9214
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 449.5 449.5 449.5 449.5
%AI3_TileBox: 143.9436 53.9438 755.9434 845.9438
%AI3_DocumentPreview: None
%AI5_ArtSize: 899.8872 899.8875
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -350.5 923.5 1 1600 926 25 0 0 64 131 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 72 8
%%BeginData: 12965 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0CFF52FD112752FD22FFFD2927A82752527D7DFD1BFFA8F82720
%27F8272027F8272027F8272027F82727A8FD20FF52272027F8272027F827
%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027
%F8527D27F827202720527DFD18FF7E272027272720272727202727272027
%27272027A8FD1FFFA8272027272720272727202727272027272720272727
%20272727202727272027272720272727202727277D7D2727202727272027
%277DA8FD15FF7DF827F827F827F827F827F827F827F827F827F87DFD1FFF
%52F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F87E5227F827F827F827F827F8277DFD14FF52
%FD132752FD1EFFA8FD2A27A852FD0C2752FD12FFA8522027F8272027F827
%2027F8272027F8272027F852FD1EFF27272027F8272027F8272027F82720
%27F8272027F8272027F8272027F8272027F8272027F8272027F82727A820
%272027F8272027F8272027F82727FD12FFFD042720272727202727272027
%27272027272720FD1DFF7D27202727272027272720272727202727272027
%27272027272720272727202727272027272720272727207D7D2720272727
%2027272720272727202752FD10FF7E27F827F827F827F827F827F827F827
%F827F827F8277DFD1BFFA827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827537DF827F827
%F827F827F827F827F827F82752FD0FFF7DFD15277DFD1BFF7DFD2B27A852
%FD112752FD0EFF5227F8272027F8272027F8272027F8272027F827202728
%FD1AFFA8F8272027F8272027F8272027F8272027F8272027F8272027F827
%2027F8272027F8272027F8272027F8272027A8522027F8272027F8272027
%F8272027F8272027A8FD0DFF522727202727272027272720272727202727
%2720272727A8FD19FF282721272727202727272027272720272727202727
%272027272720272727202727272027272720272727202727A8FD04272027
%2727202727272027272720272752FD0DFF2727F827F827F827F827F827F8
%27F827F827F827F827F8A8FD18FF7D27F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F87D
%7D27F827F827F827F827F827F827F827F827F827F8A8FD0BFFA8FD17277D
%FD17FFA8FD2D277D7DFD142752FD0BFFA8F8272027F8272027F8272027F8
%272027F8272027F8272052FD17FF52F8272027F8272027F8272027F82720
%27F8272027F827202752FD10A8A9A8A87DFFA87D52272027F8272027F827
%2027F8272027F8272027A8FD0AFF7D272027272720272727202727272027
%272720272727202728FD16FFA82727202727272027272720272727202727
%2720272727202727A8FD18FFA87D27272127272720272727202727272027
%277DFD0AFF52F827F827F827F827F827F827F827F827F827F827F827F827
%A8FD15FF2727F827F827F827F827F827F827F827F827F827F827F827F827
%A8FD1AFFA82727F827F827F827F827F827F827F82752FD0AFF52FD1827A8
%FD14FF7DFD1A27FD1DFFFD0F2752FD09FFA84C2027F8272027F8272027F8
%272027F8272027F8272027F82753FD13FFA827F8272027F8272027F82720
%27F8272027F8272027F8272027F852FD1DFF7DF8272027F8272027F82720
%27F82720A8FD08FFA8202727272027272720272727202727272027272720
%2727272052FD13FF7D272720272727202727272027272720272727202727
%272027272752FD1EFF2720272727202727272027272720277DFD08FF7D27
%F827F827F827F827F827F827F827F827F827F827F827F827F8FD12FFA8F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F87DFD1EFF
%5227F827F827F827F827F827F827F87DFD08FF7DFD1A27A8FD11FF52FD1B
%277DFD1EFFA8FD0E2752FD08FF5227F8272027F8272027F8272027F82720
%27F8272027F8272027F87DFD10FF7D27F8272027F8272027F8272027F827
%2027F8272027F8272027F82720A8FD1EFFA827F8272027F8272027F82720
%27F852FD08FF522727202727272027272720272727202727272027272720
%27272752FD0FFFAF52272720272727202727272027272720272727202727
%27202727272027A8FD1FFF2727202727272027272720FD0427FD08FFF827
%F827F827F827F827F827F827F827F827F827F827F827F827F852FD0FFF7D
%F827F827F827F827F827F827F827F827F827F827F827F827F827F82727FD
%1FFFA852F827F827F827F827F827F827F827FD07FFA8FD1C27FD0FFFFD1D
%277DFD20FF52FD0E27FD07FF7DF8272027F8272027F8272027F8272027F8
%272027F8272027F82720277DFD0DFF5227F8272027F8272027F8272027F8
%272027F8272027F8272027F827202752FD20FF7D2027F8272027F8272027
%F8272027FD07FF7D27202727272027272720272727202727272027272720
%2727272027277DFD0CFF7D27272720272727202727272027272720272727
%2027272720272727202727A8FD20FF7D2727272027272720272727202727
%FD07FF52F827F827F827F827F827F827F827F827F827F827F827F827F827
%F82752FD0CFF27F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827A8FD20FF7DF827F827F827F827F827F827F827FD07FFFD
%1E27A8FD0AFF7DFD1F27FD21FF7DFD0E27FD06FF7D272027F8272027F827
%2027F8272027F8272027F8272027F8272027F82720A8FD0AFF2027F82720
%27F8272027F8272027F8272027F8272027F8272027F8272027F852FD21FF
%52F8272027F8272027F8272027F827FD06FF7E2027272720272727202727
%272027272720272727202727272027272720277DFD09FF52272727202727
%2720272727202727272027272720272727202727272027272752FD21FF27
%27202727272027272720FD0427FD06FF5227F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F87DFD06FFA8FF7D27F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F87DFD20FF
%A852F827F827F827F827F827F827F827FD06FF53FD1E2752FD08FF52FD20
%277DFD21FFFD0E2752FD06FF2727F8272027F8272027F8272027F8272027
%F8272027F8272027F8272027F827A8FD06FF7D2027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F82720A8FD20FFA8272027
%F8272027F8272027F827207DFD05FFA82727272027272720272727202727
%272027272720272727202727272027272720A8FD06FFFD04272027272720
%2727272027272720272727202727272027272720272727204CFD21FFA820
%272727202727272027272720277DFD05FFA8F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F82752FD05FF5227F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F82727FD
%21FF7D27F827F827F827F827F827F827F87DFD05FF7DFD202753FD04FFA8
%FD22277DFD21FF7DFD0E27A8FD05FF7DF8272027F8272027F8272027F827
%2027F8272027F8272027F8272027F827202727FD04FF522027F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F82720277DFD21
%FF5227F8272027F8272027F827202727FD06FF5227202727272027272720
%2727272027272720272727202727272027272720272727A8FFFF7D202727
%272027272720272727202727272027272720272727202727272027272720
%2727A8FD21FF522727202727272027272720272752FD05FFA852F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F87D
%FFFF2727F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827A8FD20FFA8F827F827F827F827F827F827F82752FD06
%FFFD222752FF53FD2427FD21FF7DFD0E277DFD05FF7D272027F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F82720527E2720
%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8
%272027F853FD21FF7DF8272027F8272027F8272027F82784FD05FF7E2027
%272720272727202727272027272720272727202727272027272720272727
%202727522027272720272727202727272027272720272727202727272027
%272720272727202727277DFD21FF5227202727272027272720FD0427FD06
%FF5227F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F87EFD20FF7D27F827F827F827F827F827
%F827F852FD06FF53FD4827A8FD20FF7DFD0E277DFD06FF2727F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720
%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8
%272027F82727FD21FF21272027F8272027F8272027F82720A8FD05FFA827
%272720272727202727272027272720272727202727272027272720272727
%202727272027272720272727202727272027272720272727202727272027
%272720272727202727272052FD20FF7D2720272727202727272027272720
%52FD06FFA8F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F82752FD1FFFA827F827F827F827F8
%27F827F827F82753FD06FF7DFD48277EFD1FFF7DFD0F27AFFD06FF7DF827
%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F8272027F827
%2027F8272027F82720277DFD1EFFA8F8272027F8272027F8272027F82720
%52FD07FF5227202727272027272720272727202727272027272720272727
%202727272027272720272727202727272027272720272727202727272027
%2727202727272027272720272727202727A8FD1EFF272721272727202727
%2720272727202784FD06FFA827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F852A8FD1DFF52
%27F827F827F827F827F827F827F82727FD07FFA8FD482752FD1DFF52FD10
%27A8FD07FF7D272027F8272027F8272027F8272027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720
%27F8272027F8272027F8272027F8272027F87DFD1CFF5227F8272027F827
%2027F8272027F8272052FD08FF7D20272727202727272027272720272727
%202727272027272720272727202727272027272720272727202727272027
%27272027272720272727202727272027272720272727202727277DFD1BFF
%522727272027272720272727202727272027A8FD08FF5227F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F8A8FD18FFA8A82727F827F827F827F827F827F827F827F82752
%FD09FF52FD4827FD18FF7D52FD1327FD09FFA82027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720
%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8
%2727A87DA87EA87EA9FD08A87DA87D7EA87D52522727F8272027F8272027
%F8272027F8272027F827207DFD09FFA82727272027272720272727202727
%272027272720272727202727272027272720272727202727272027272720
%272727202727272027272720272727202727272027272720272727202727
%2720FD0B272027272720A827272027272720272727202727272027272720
%272727207DFD0AFF7EF827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F8527D27F827F827F827F827F827F827F827F827F8
%27F827F828A8FD0AFF53FD5B2759A8FD1627A8FD0BFF52F8272027F82720
%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720
%27F8272027F8272027F8272027F8272027F8272027F82720A852272027F8
%272027F8272027F8272027F8272027F827A8FD0CFF272720272727202727
%272027272720272727202727272027272720272727202727272027272720
%272727202727272027272720272727202727272027272720272727202727
%2720272727202727272027272720272727202727272027A8522027272720
%272727202727272027272720272727A8FD0CFF7D27F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F82727A82727F827F827F8
%27F827F827F827F827F827F852A8FD0DFFA8FD5B2752A8FD122752FD0FFF
%7D272027F8272027F8272027F8272027F8272027F8272027F8272027F827
%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F8272027F827
%2027527D2027F8272027F8272027F8272027F8272052A8FD0FFF52202727
%272027272720272727202727272027272720272727202727272027272720
%272727202727272027272720272727202727272027272720272727202727
%272027272720272727202727272027272720272727202727272027277E52
%272727202727272027272720FD0427A8FD11FF2727F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827A852F827F827F827F8
%27F827F827F82752A8FD12FFFD5C27FFFD0D277DA8FD14FF2727F8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F8272027F827
%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F87D7D27F827
%2027F827202721527DA8FD16FFA8FD5A277DA8FD052752537D7DFD1CFFFD
%07A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FD1EFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 1 1 255 79 79 0 50 Lb
(Guides For Artboard) Ln
0 A
0 899.8875 m
899.8872 899.8875 L
899.8872 0 L
0 0 L
0 899.8875 L
(n) *
143.5 845.5 m
755.5 845.5 L
755.5 53.5 L
143.5 53.5 L
143.5 845.5 L
(n) *
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 0 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
*u
%AI3_Note:<< /operation /xor /defaultFill false >>1 O
0 0 0 1 k
0 J 0 j 1 w 10 M []0 d0 XR
185.9768 628.9214 m
217.303 628.9214 248.6387 628.9214 279.9648 628.9214 C
280.8091 627.7871 279.8384 628.7759 280.9648 627.9214 C
280.9434 623.7529 282.1011 621.5767 282.9648 618.9229 C
282.9648 617.2563 282.9648 615.5894 282.9648 613.9233 C
283.2979 613.9233 283.6313 613.9233 283.9644 613.9233 C
284.2979 610.9238 284.6309 607.9238 284.9644 604.9243 C
285.2979 604.9243 285.6309 604.9243 285.9644 604.9243 C
285.9644 603.5913 285.9644 602.2578 285.9644 600.9248 C
286.2974 600.9248 286.6309 600.9248 286.9639 600.9248 C
286.9639 599.2588 286.9639 597.5918 286.9639 595.9253 C
287.2974 595.9253 287.6309 595.9253 287.9639 595.9253 C
288.2974 592.9263 288.6304 589.9258 288.9639 586.9268 C
289.2969 586.9268 289.6304 586.9268 289.9639 586.9268 C
289.9639 585.5938 289.9639 584.2603 289.9639 582.9272 C
290.2969 582.9272 290.6304 582.9272 290.9634 582.9272 C
290.9634 581.2607 290.9634 579.5938 290.9634 577.9277 C
291.2969 577.9277 291.6304 577.9277 291.9634 577.9277 C
292.2969 574.9282 292.6299 571.9282 292.9634 568.9287 C
293.2964 568.9287 293.6299 568.9287 293.9634 568.9287 C
295.2964 561.2637 296.6299 553.5967 297.9629 545.9316 C
304.3955 526.2158 306.583 502.6626 312.9609 482.9395 C
313.9604 476.9409 314.9609 470.9404 315.9604 464.9419 C
316.2939 464.9419 316.627 464.9419 316.9604 464.9419 C
316.9604 463.2754 316.9604 461.6089 316.9604 459.9424 C
320.5654 448.8374 322.3931 435.0083 325.959 423.9468 C
325.959 422.2808 325.959 420.6138 325.959 418.9478 C
326.2925 418.9478 326.626 418.9478 326.959 418.9478 C
327.9976 415.8135 327.0044 412.0654 328.959 409.9487 C
328.959 410.2822 328.959 410.6152 328.959 410.9487 C
366.6069 474.5708 406.3657 541.7612 457.9429 628.9214 C
526.5938 628.9214 595.2656 628.9214 663.917 628.9214 C
663.917 628.5879 663.917 628.2549 663.917 627.9214 C
664.25 627.9214 664.5835 627.9214 664.917 627.9214 C
660.251 605.5933 655.584 583.2583 650.9185 560.9297 C
617.7905 563.9253 579.7764 561.917 544.9316 561.9297 C
544.9941 556.9917 543.9609 554.2847 542.9321 550.9312 C
542.9321 548.9316 542.9321 546.9316 542.9321 544.9316 C
542.5986 544.9316 542.2656 544.9316 541.9321 544.9316 C
541.9321 542.9321 541.9321 540.9321 541.9321 538.9326 C
541.5991 538.9326 541.2656 538.9326 540.9326 538.9326 C
540.9326 537.2661 540.9326 535.5996 540.9326 533.9331 C
540.5991 533.9331 540.2656 533.9331 539.9326 533.9331 C
539.9326 531.9336 539.9326 529.9336 539.9326 527.9341 C
539.5991 527.9341 539.2656 527.9341 538.9326 527.9341 C
538.9326 525.9346 538.9326 523.9341 538.9326 521.9346 C
538.5996 521.9346 538.2661 521.9346 537.9326 521.9346 C
537.9326 519.9351 537.9326 517.9351 537.9326 515.9355 C
537.5996 515.9355 537.2661 515.9355 536.9326 515.9355 C
536.9326 514.269 536.9326 512.6025 536.9326 510.936 C
536.5996 510.936 536.2661 510.936 535.9331 510.936 C
535.5996 506.937 535.2666 502.9365 534.9331 498.9375 C
529.0425 479.7847 528.7842 456.1177 522.9346 436.9453 C
522.6016 432.9463 522.2681 428.9458 521.9346 424.9468 C
519.3701 416.5557 518.4756 405.4092 515.9355 396.9502 C
515.6021 392.9512 515.269 388.9512 514.9355 384.9521 C
514.6025 384.9521 514.269 384.9521 513.9355 384.9521 C
513.9355 383.2856 513.9355 381.6187 513.9355 379.9526 C
513.6025 379.9526 513.269 379.9526 512.936 379.9526 C
512.936 377.9531 512.936 375.9526 512.936 373.9531 C
512.6025 373.9531 512.269 373.9531 511.936 373.9531 C
511.936 371.9536 511.936 369.9536 511.936 367.9541 C
511.6025 367.9541 511.2695 367.9541 510.936 367.9541 C
510.936 366.2876 510.936 364.6211 510.936 362.9546 C
510.603 362.9546 510.2695 362.9546 509.936 362.9546 C
509.936 360.9551 509.936 358.9551 509.936 356.9556 C
507.9292 350.2573 506.1396 342.2148 505.9365 333.958 C
538.1255 333.8882 573.4453 332.1323 603.9243 334.958 C
603.9766 327.6279 601.7212 320.7231 599.9248 314.9604 C
598.9253 308.2954 597.9253 301.6284 596.9253 294.9629 C
594.394 286.9126 591.5591 276.3921 590.9263 266.9668 C
487.6162 266.9668 384.2749 266.9668 280.9648 266.9668 C
247.9722 266.9668 214.9697 266.9668 181.9773 266.9668 C
164.8804 266.9663 144.3374 265.2183 128.9839 267.9663 C
127.3176 270.2993 125.6509 272.6328 123.9844 274.9658 C
123.8777 282.9263 126.0508 291.5601 127.9839 297.9629 C
127.9839 299.9624 127.9839 301.9624 127.9839 303.9619 C
129.9583 310.3647 131.0249 319.5503 132.9834 325.959 C
133.3167 329.9585 133.6499 333.9585 133.9832 337.9575 C
137.6392 349.8374 138.3547 365.061 141.9822 376.9531 C
147.981 412.9448 153.9812 448.9473 159.98 484.9395 C
165.2715 502.2378 165.719 523.6191 170.9785 540.9326 C
171.312 544.9316 171.6453 548.9316 171.9785 552.9307 C
174.5369 561.3232 175.4463 572.4658 177.9778 580.9272 C
177.9778 582.9268 177.9778 584.9272 177.9778 586.9268 C
178.311 586.9268 178.6443 586.9268 178.9775 586.9268 C
178.9775 588.5928 178.9775 590.2598 178.9775 591.9258 C
179.3108 591.9258 179.6443 591.9258 179.9775 591.9258 C
179.9775 593.9253 179.9775 595.9258 179.9775 597.9253 C
180.3108 597.9253 180.644 597.9253 180.9773 597.9253 C
180.9773 599.9248 180.9773 601.9248 180.9773 603.9243 C
183.1567 611.0938 185.1289 620.7715 185.9768 628.9214 C
f
*U
*u
595.9253 266.9668 m
600.5908 289.6284 605.2578 312.2964 609.9238 334.958 C
621.2393 335.0723 630.4448 338.9751 637.9199 342.957 C
638.5869 342.957 639.2534 342.957 639.9199 342.957 C
639.9199 343.2905 639.9199 343.6235 639.9199 343.957 C
641.2529 344.29 642.5864 344.6235 643.9194 344.957 C
643.9194 345.29 643.9194 345.6235 643.9194 345.9565 C
644.9194 346.29 645.9194 346.6235 646.9189 346.9565 C
647.2524 347.623 647.5859 348.29 647.9189 348.9565 C
648.5854 348.9565 649.252 348.9565 649.9189 348.9565 C
651.252 350.6226 652.585 352.2896 653.918 353.9556 C
673.0283 367.7563 684.3394 391.6543 692.9136 415.9482 C
692.9136 417.2808 692.9136 418.6143 692.9136 419.9473 C
693.2466 419.9473 693.5801 419.9473 693.9131 419.9473 C
693.9131 421.2803 693.9131 422.6138 693.9131 423.9468 C
694.2466 423.9468 694.5801 423.9468 694.9131 423.9468 C
694.9131 425.2798 694.9131 426.6133 694.9131 427.9463 C
695.2466 427.9463 695.5796 427.9463 695.9131 427.9463 C
695.9131 429.2793 695.9131 430.6128 695.9131 431.9458 C
696.2461 431.9458 696.5796 431.9458 696.9131 431.9458 C
696.9131 433.6123 696.9131 435.2793 696.9131 436.9453 C
697.2461 436.9453 697.5796 436.9453 697.9126 436.9453 C
697.9126 438.9448 697.9126 440.9453 697.9126 442.9443 C
698.2461 442.9443 698.5796 442.9443 698.9126 442.9443 C
698.9126 445.2773 698.9126 447.6108 698.9126 449.9438 C
699.2461 449.9438 699.5791 449.9438 699.9126 449.9438 C
699.9126 452.6099 699.9126 455.2769 699.9126 457.9429 C
700.2456 457.9429 700.5791 457.9429 700.9121 457.9429 C
701.2456 465.6079 701.5791 473.2749 701.9121 480.9399 C
702.2456 480.9399 702.5791 480.9399 702.9121 480.9399 C
704.1855 485.5098 702.8242 502.6968 701.9121 505.9365 C
701.2456 512.6021 700.5791 519.269 699.9126 525.9341 C
699.5791 525.9341 699.2461 525.9341 698.9126 525.9341 C
698.5796 527.9336 698.2461 529.9341 697.9126 531.9336 C
697.5796 531.9336 697.2461 531.9336 696.9131 531.9336 C
696.2461 533.9331 695.5796 535.9331 694.9131 537.9326 C
694.5801 537.9326 694.2466 537.9326 693.9131 537.9326 C
693.9131 538.5991 693.9131 539.2661 693.9131 539.9326 C
693.5801 539.9326 693.2466 539.9326 692.9136 539.9326 C
692.9136 540.5991 692.9136 541.2656 692.9136 541.9321 C
687.1445 551.0234 671.5801 560.6143 656.918 560.9297 C
656.9004 567.8838 659.1787 575.3823 660.9175 580.9272 C
660.9175 582.5938 660.9175 584.2603 660.9175 585.9268 C
663.2114 593.168 664.6177 602.5903 666.9165 609.9238 C
666.9165 611.5898 666.9165 613.2568 666.9165 614.9229 C
667.25 614.9229 667.583 614.9229 667.9165 614.9229 C
667.9165 616.5894 667.9165 618.2563 667.9165 619.9224 C
668.2495 619.9224 668.583 619.9224 668.9165 619.9224 C
670.0537 623.5396 668.6025 626.5161 670.916 628.9214 C
673.0371 627.1206 676.604 628.8721 679.915 627.9214 C
688.5796 625.9219 697.2471 623.9219 705.9116 621.9224 C
705.9116 621.5889 705.9116 621.2554 705.9116 620.9224 C
706.5781 620.9224 707.2451 620.9224 707.9116 620.9224 C
707.9116 620.5889 707.9116 620.2559 707.9116 619.9224 C
708.9111 619.9224 709.9111 619.9224 710.9111 619.9224 C
710.9111 619.5894 710.9111 619.2559 710.9111 618.9229 C
712.2441 618.5894 713.5776 618.2559 714.9106 617.9229 C
714.9106 617.5894 714.9106 617.2559 714.9106 616.9229 C
715.5771 616.9229 716.2437 616.9229 716.9102 616.9229 C
716.9102 616.5898 716.9102 616.2563 716.9102 615.9229 C
717.5771 615.9229 718.2437 615.9229 718.9102 615.9229 C
718.9102 615.5898 718.9102 615.2563 718.9102 614.9229 C
719.5767 614.9229 720.2432 614.9229 720.9102 614.9229 C
720.9102 614.5898 720.9102 614.2563 720.9102 613.9233 C
721.5762 613.9233 722.2432 613.9233 722.9097 613.9233 C
722.9097 613.5898 722.9097 613.2568 722.9097 612.9233 C
723.5762 612.9233 724.2427 612.9233 724.9092 612.9233 C
725.2427 612.2568 725.5762 611.5898 725.9092 610.9238 C
726.5757 610.9238 727.2427 610.9238 727.9092 610.9238 C
727.9092 610.5903 727.9092 610.2568 727.9092 609.9238 C
728.9087 609.5903 729.9087 609.2568 730.9087 608.9238 C
731.2417 608.2573 731.5752 607.5908 731.9087 606.9238 C
732.5752 606.9238 733.2417 606.9238 733.9082 606.9238 C
734.9082 605.5908 735.9082 604.2578 736.9077 602.9248 C
737.5742 602.9248 738.2412 602.9248 738.9077 602.9248 C
740.5737 600.9253 742.2407 598.9248 743.9072 596.9253 C
745.5732 595.5923 747.2402 594.2588 748.9063 592.9258 C
748.9063 592.2593 748.9063 591.5928 748.9063 590.9263 C
750.2393 589.9263 751.5728 588.9263 752.9058 587.9268 C
752.9058 587.2598 752.9058 586.5933 752.9058 585.9268 C
753.5723 585.5938 754.2393 585.2603 754.9058 584.9268 C
755.2388 583.9272 755.5723 582.9268 755.9053 581.9272 C
756.2388 581.9272 756.5723 581.9272 756.9053 581.9272 C
757.2388 580.5942 757.5718 579.2607 757.9053 577.9277 C
758.5718 577.5947 759.2383 577.2612 759.9048 576.9277 C
760.2383 575.5947 760.5718 574.2612 760.9048 572.9282 C
761.2383 572.9282 761.5713 572.9282 761.9048 572.9282 C
762.5713 570.9287 763.2378 568.9287 763.9043 566.9292 C
764.2378 566.9292 764.5713 566.9292 764.9043 566.9292 C
764.9043 565.9292 764.9043 564.9292 764.9043 563.9297 C
765.2378 563.9297 765.5708 563.9297 765.9043 563.9297 C
765.9043 563.2632 765.9043 562.5962 765.9043 561.9297 C
766.2373 561.9297 766.5708 561.9297 766.9043 561.9297 C
766.9043 560.9302 766.9043 559.9297 766.9043 558.9302 C
767.2373 558.9302 767.5708 558.9302 767.9038 558.9302 C
767.9038 557.9302 767.9038 556.9302 767.9038 555.9307 C
768.2373 555.9307 768.5703 555.9307 768.9038 555.9307 C
768.9038 554.9307 768.9038 553.9307 768.9038 552.9307 C
769.2373 552.9307 769.5703 552.9307 769.9038 552.9307 C
769.9038 551.9312 769.9038 550.9312 769.9038 549.9312 C
770.2368 549.9312 770.5703 549.9312 770.9033 549.9312 C
770.9033 548.5981 770.9033 547.2646 770.9033 545.9316 C
772.3784 541.3857 773.5464 534.6592 774.9033 529.9336 C
775.2363 524.2686 775.5698 518.6011 775.9028 512.936 C
776.2363 512.936 776.5693 512.936 776.9028 512.936 C
776.9028 509.27 776.9028 505.603 776.9028 501.937 C
776.9053 493.6206 777.7759 482.5859 775.9028 475.9404 C
775.9028 471.9414 775.9028 467.9409 775.9028 463.9419 C
775.5698 463.9419 775.2363 463.9419 774.9033 463.9419 C
774.9033 460.9429 774.9033 457.9424 774.9033 454.9429 C
774.5698 454.9429 774.2363 454.9429 773.9033 454.9429 C
773.9033 452.2769 773.9033 449.6104 773.9033 446.9443 C
772.4736 442.0229 771.3809 434.7222 769.9038 429.9463 C
769.5703 426.6138 769.2373 423.2803 768.9038 419.9473 C
768.5703 419.9473 768.2373 419.9473 767.9038 419.9473 C
767.9038 418.6143 767.9038 417.2808 767.9038 415.9482 C
767.5708 415.9482 767.2373 415.9482 766.9043 415.9482 C
766.9043 414.6152 766.9043 413.2813 766.9043 411.9482 C
766.5708 411.9482 766.2373 411.9482 765.9043 411.9482 C
765.9043 410.6152 765.9043 409.2822 765.9043 407.9492 C
765.5708 407.9492 765.2378 407.9492 764.9043 407.9492 C
764.9043 406.6162 764.9043 405.2827 764.9043 403.9497 C
764.5713 403.9497 764.2378 403.9497 763.9043 403.9497 C
763.9043 402.9497 763.9043 401.9497 763.9043 400.9497 C
763.5713 400.9497 763.2378 400.9497 762.9048 400.9497 C
762.9048 399.9502 762.9048 398.9502 762.9048 397.9502 C
762.5713 397.9502 762.2378 397.9502 761.9048 397.9502 C
761.9048 396.9507 761.9048 395.9502 761.9048 394.9507 C
761.5713 394.9507 761.2383 394.9507 760.9048 394.9507 C
760.9048 393.9507 760.9048 392.9507 760.9048 391.9512 C
760.5718 391.9512 760.2383 391.9512 759.9048 391.9512 C
759.9048 390.9512 759.9048 389.9512 759.9048 388.9512 C
759.5718 388.9512 759.2383 388.9512 758.9053 388.9512 C
758.5718 386.9517 758.2383 384.9517 757.9053 382.9521 C
743.6514 350.0469 726.3848 319.7007 698.9126 299.9624 C
697.9126 298.6294 696.9126 297.2959 695.9131 295.9629 C
694.9131 295.6299 693.9131 295.2964 692.9136 294.9629 C
692.5801 294.2964 692.2466 293.6299 691.9136 292.9634 C
691.2471 292.9634 690.5801 292.9634 689.9136 292.9634 C
689.5806 292.2969 689.2471 291.6299 688.9141 290.9634 C
687.9141 290.6304 686.9141 290.2969 685.9141 289.9639 C
685.9141 289.6304 685.9141 289.2969 685.9141 288.9639 C
685.2476 288.9639 684.5811 288.9639 683.9146 288.9639 C
683.5811 288.2974 683.248 287.6304 682.9146 286.9639 C
681.915 286.6309 680.915 286.2974 679.915 285.9644 C
679.915 285.6309 679.915 285.2979 679.915 284.9644 C
677.9155 284.2979 675.915 283.6309 673.9155 282.9648 C
673.9155 282.6313 673.9155 282.2979 673.9155 281.9648 C
673.249 281.9648 672.5825 281.9648 671.916 281.9648 C
671.916 281.6313 671.916 281.2979 671.916 280.9648 C
669.9165 280.2983 667.916 279.6318 665.9165 278.9648 C
665.9165 278.6318 665.9165 278.2983 665.9165 277.9653 C
657.5854 275.2993 649.2515 272.6323 640.9199 269.9663 C
636.9209 269.6328 632.9204 269.2998 628.9214 268.9663 C
620.0674 266.4316 607.4629 266.9854 595.9253 266.9668 C
f
*U
*u
198.9751 297.9629 m
271.6255 297.9629 344.2974 297.9629 416.9478 297.9629 C
416.8564 305.6196 419.0889 313.8833 420.9473 319.96 C
420.9473 321.9595 420.9473 323.9595 420.9473 325.959 C
423.5127 334.4087 424.3838 345.563 426.9468 353.9556 C
427.2798 357.9546 427.6133 361.9551 427.9463 365.9541 C
431.0039 375.918 431.8994 388.9473 434.9458 398.9502 C
435.2788 402.9492 435.6123 406.9497 435.9453 410.9487 C
439.0005 420.9458 439.917 433.9702 442.9443 443.9443 C
443.2778 447.9434 443.6113 451.9438 443.9443 455.9429 C
444.2778 455.9429 444.6113 455.9429 444.9443 455.9429 C
444.9443 457.6094 444.9443 459.2759 444.9443 460.9424 C
445.2773 460.9424 445.6108 460.9424 445.9443 460.9424 C
445.9443 462.9419 445.9443 464.9419 445.9443 466.9414 C
446.2773 466.9414 446.6108 466.9414 446.9443 466.9414 C
446.9443 468.9414 446.9443 470.9414 446.9443 472.9409 C
448.6606 478.5825 450.252 486.3574 450.9434 492.9385 C
450.6104 492.9385 450.2769 492.9385 449.9438 492.9385 C
449.9438 492.272 449.9438 491.605 449.9438 490.9385 C
447.5654 489.2671 449.3218 490.2012 447.9438 487.939 C
447.6108 487.939 447.2773 487.939 446.9443 487.939 C
446.9443 487.2725 446.9443 486.606 446.9443 485.939 C
446.2773 485.606 445.6108 485.2725 444.9443 484.9395 C
444.9443 484.2729 444.9443 483.606 444.9443 482.9395 C
444.6113 482.9395 444.2778 482.9395 443.9443 482.9395 C
443.9443 482.2729 443.9443 481.6064 443.9443 480.9399 C
443.6113 480.9399 443.2778 480.9399 442.9443 480.9399 C
442.9443 480.2734 442.9443 479.6064 442.9443 478.9399 C
442.2783 478.6069 441.6113 478.2734 440.9448 477.9404 C
440.2783 475.9404 439.6118 473.9404 438.9453 471.9409 C
438.2788 471.6079 437.6118 471.2744 436.9453 470.9409 C
436.9453 470.2744 436.9453 469.6079 436.9453 468.9414 C
436.6123 468.9414 436.2788 468.9414 435.9453 468.9414 C
435.9453 468.2749 435.9453 467.6079 435.9453 466.9414 C
435.2788 466.6084 434.6123 466.2749 433.9458 465.9419 C
433.2793 463.9424 432.6123 461.9419 431.9458 459.9424 C
431.2793 459.6094 430.6128 459.2759 429.9463 458.9424 C
429.2798 456.9429 428.6128 454.9429 427.9463 452.9434 C
427.2798 452.6099 426.6133 452.2769 425.9468 451.9434 C
425.6133 450.6104 425.2803 449.2769 424.9468 447.9438 C
424.2803 447.6108 423.6138 447.2773 422.9473 446.9443 C
422.2808 444.9443 421.6138 442.9443 420.9473 440.9448 C
420.2808 440.6118 419.6143 440.2783 418.9478 439.9448 C
418.9478 439.2783 418.9478 438.6118 418.9478 437.9453 C
418.6143 437.9453 418.2808 437.9453 417.9478 437.9453 C
417.9478 437.2788 417.9478 436.6118 417.9478 435.9453 C
417.6143 435.9453 417.2813 435.9453 416.9478 435.9453 C
416.9478 435.2788 416.9478 434.6123 416.9478 433.9458 C
416.2813 433.6123 415.6147 433.2793 414.9482 432.9458 C
414.2817 430.9463 413.6147 428.9463 412.9482 426.9468 C
412.2817 426.6133 411.6152 426.2798 410.9487 425.9468 C
410.9487 425.2803 410.9487 424.6133 410.9487 423.9468 C
410.6152 423.9468 410.2822 423.9468 409.9487 423.9468 C
409.9487 423.2803 409.9487 422.6138 409.9487 421.9473 C
409.2822 421.6138 408.6152 421.2808 407.9492 420.9473 C
407.2827 418.9478 406.6157 416.9478 405.9492 414.9482 C
405.2827 414.6147 404.6162 414.2813 403.9497 413.9482 C
403.2832 411.9487 402.6162 409.9482 401.9497 407.9492 C
401.2832 407.6157 400.6167 407.2822 399.9502 406.9492 C
399.9502 406.2827 399.9502 405.6157 399.9502 404.9492 C
399.6167 404.9492 399.2832 404.9492 398.9502 404.9492 C
398.9502 404.2827 398.9502 403.6162 398.9502 402.9497 C
398.2837 402.6162 397.6167 402.2832 396.9502 401.9497 C
396.2837 399.9502 395.6172 397.9502 394.9507 395.9507 C
394.2842 395.6172 393.6172 395.2837 392.9507 394.9507 C
392.2842 392.9512 391.6177 390.9507 390.9512 388.9512 C
390.2847 388.6182 389.6177 388.2847 388.9512 387.9517 C
388.2847 385.9521 387.6182 383.9517 386.9517 381.9521 C
386.2852 381.6191 385.6182 381.2856 384.9521 380.9521 C
384.6187 379.6191 384.2852 378.2861 383.9521 376.9531 C
383.2856 376.6196 382.6187 376.2861 381.9521 375.9531 C
381.2856 373.9536 380.6191 371.9531 379.9526 369.9536 C
379.2861 369.6206 378.6191 369.2871 377.9526 368.9541 C
377.2861 366.9541 376.6196 364.9541 375.9531 362.9546 C
375.2866 362.6216 374.6196 362.2881 373.9531 361.9546 C
373.6201 360.6216 373.2866 359.2881 372.9536 357.9551 C
372.2871 357.6221 371.6201 357.2886 370.9536 356.9556 C
370.2871 354.9556 369.6206 352.9556 368.9541 350.9561 C
368.2876 350.623 367.6206 350.2896 366.9541 349.9561 C
366.2876 347.9565 365.6211 345.9565 364.9546 343.957 C
364.2881 343.6235 363.6211 343.2905 362.9546 342.957 C
362.6216 341.624 362.2881 340.2905 361.9546 338.9575 C
361.2881 338.6245 360.6216 338.291 359.9551 337.9575 C
359.2886 335.958 358.6216 333.958 357.9551 331.9585 C
357.2886 331.625 356.6221 331.292 355.9556 330.9585 C
355.2891 328.959 354.6221 326.959 353.9556 324.9595 C
353.2891 324.626 352.6226 324.293 351.9561 323.9595 C
351.2896 321.96 350.623 319.96 349.9561 317.96 C
349.2896 317.627 348.623 317.2935 347.9565 316.9604 C
347.9565 316.2939 347.9565 315.627 347.9565 314.9604 C
346.5137 312.4648 344.7803 311.4814 343.957 307.9614 C
321.9619 307.9614 299.9604 307.9614 277.9653 307.9614 C
277.8496 314.063 275.5405 320.1157 273.9658 324.9595 C
273.6323 328.292 273.2993 331.6255 272.9658 334.958 C
272.6328 334.958 272.2993 334.958 271.9658 334.958 C
271.6328 337.9575 271.2993 340.9575 270.9663 343.957 C
270.6328 343.957 270.2993 343.957 269.9663 343.957 C
269.9663 345.29 269.9663 346.6235 269.9663 347.9565 C
269.6328 347.9565 269.2998 347.9565 268.9663 347.9565 C
268.6333 350.9556 268.2998 353.9561 267.9663 356.9556 C
267.6333 356.9556 267.2998 356.9556 266.9668 356.9556 C
265.9668 363.2871 264.9668 369.6211 263.9668 375.9531 C
258.4658 392.8062 256.4102 413.1069 250.9688 429.9463 C
249.6357 437.6113 248.3022 445.2783 246.9692 452.9434 C
246.6357 452.9434 246.3027 452.9434 245.9692 452.9434 C
245.9692 454.6099 245.9692 456.2764 245.9692 457.9429 C
242.7817 467.7603 241.2231 480.1099 237.9702 489.9385 C
237.3037 494.6045 236.6372 499.2715 235.9707 503.937 C
235.6372 503.937 235.3037 503.937 234.9707 503.937 C
234.5547 497.6836 232.5991 489.2471 230.9712 483.9395 C
230.9712 481.9399 230.9712 479.9399 230.9712 477.9404 C
228.9707 471.3628 227.9614 462.4395 225.9717 455.9429 C
225.6387 451.9438 225.3052 447.9434 224.9719 443.9443 C
221.9004 433.9526 221.0178 420.9175 217.9727 410.9487 C
217.6394 406.9497 217.3062 402.9492 216.9729 398.9502 C
213.9128 388.9541 213.0112 375.9253 209.9736 365.9541 C
209.6404 361.9551 209.3071 357.9546 208.9739 353.9556 C
207.0039 347.4922 205.9392 338.4243 203.9746 331.9585 C
203.9746 329.959 203.9746 327.959 203.9746 325.959 C
203.6411 325.959 203.3079 325.959 202.9746 325.959 C
201.6416 316.6279 200.3081 307.2939 198.9751 297.9629 C
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
